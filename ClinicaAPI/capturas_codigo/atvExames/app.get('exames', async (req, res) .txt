app.get('/exames', async (req, res) => {
    try {
        const exames = await prismaClient.Exame.findMany();
        return res.json(exames);
    } catch (e) {
        console.log(e);
    }
});

app.get("/exame/:id", async (req, res) => {
    try {
        const exame = await prismaClient.Exame.findUnique({
            where: {
                id: Number(req.params.id)
            }
        });

        if (!exame) return res.status(404).send("Exame n達o encontrado");
        return res.json(exame);
    } catch (e) {
        console.log(e);
    }
});

app.post("/exame", async (req, res) => {
    try {
        const { body } = req;
        const exame = await prismaClient.Exame.create({
            data: {
                tipo_exame: body.tipo_exame,
                resultado: body.resultado,
                data_exame: body.data_exame,
                link_arquivo: body.link_arquivo,
                observacoes: body.observacoes,
                paciente_id: body.paciente_id
            },
        })
        return res.status(201).json(exame)
    } catch (error) {
        console.log(error);
    }
});

app.put("/exame/:id", async (req, res) => {
    try {
        const { body, params } = req;

        if (!!body.tipo_exame || !!body.resultado || !!body.data_exame || !!body.link_arquivo || !!body.observacoes || !!body.paciente_id) {
            await prismaClient.Exame.update({
                where: { id: Number(params.id) },
                data: {
                    ...body
                },
            })

            const exameAtualizado = await prismaClient.Exame.findUnique({
                where: {
                    id: Number(params.id)
                }
            })

            res.status(201).json({
                message: "Exame atualizado!",
                data: exameAtualizado
            })

        } else {
            return res.status(404).send("Atributos enviados n達o condizem com o schema");
        }

    } catch (error) {
        console.log(error)
        if (error.code === "P2025") return res.status(404).send("Exame n達o encontrado");
    }
})

app.delete("/exame/:id", async (req, res) => {
    const { params } = req;
    try {
        const exameDeletado = await prismaClient.Exame.delete({
            where: {
                id: Number(params.id),
            },
        })
        res.status(200).json({
            message: "Exame deletado!",
            data: exameDeletado
        })
    } catch (error) {
        console.log(error)
        if (error.code === "P2025") return res.status(404).send("Exame n達o encontrado");

    }
})
